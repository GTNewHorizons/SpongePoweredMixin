// Gradle repositories and dependencies
buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.11.0'
        classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.4'
    }
}

// Apply plugin
apply plugin: 'java'
apply plugin: 'license'
apply plugin: 'checkstyle'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'com.github.johnrengelman.shadow'

// Default tasks
defaultTasks 'licenseFormat', 'check', 'build'

// Basic project information
group = 'org.spongepowered'
archivesBaseName = 'mixin'
version = buildVersion + (buildType == 'RELEASE' ? '' : "-$buildType")

// Extended project information
ext.projectName = 'Mixin'
ext.inceptionYear = '2014'
ext.packaging = 'jar'

// Define variables
ext.buildNumber = project.hasProperty("buildNumber") ? buildNumber : '0'
ext.ciSystem = project.hasProperty("ciSystem") ? ciSystem : 'unknown'
ext.commit = project.hasProperty("commit") ? commit : 'unknown'
ext.asmVersion = project.hasProperty("asmVersion") ? asmVersion : '6.2'
ext.legacyForgeAsmVersion = project.hasProperty("legacyForgeAsmVersion") ? asmVersion : '5.0.3'

// Minimum version of Java required
sourceCompatibility = '1.8'
targetCompatibility = '1.8'

// Project repositories
repositories {
    mavenCentral()
    maven {
        name = 'minecraft'
        url = 'https://libraries.minecraft.net/'
    }
    maven {
        // For fernflower
        name = 'sponge'
        url = 'https://repo.spongepowered.org/maven'
    }
    maven {
        // For modlauncher
        name = 'forge'
        url = 'https://files.minecraftforge.net/maven'
    }
}

configurations {
    thinJar
    stagingJar
    
    launchwrapperCompile        .extendsFrom compile
    launchwrapperImplementation .extendsFrom implementation
    modlauncherCompile          .extendsFrom compile
    modlauncherImplementation   .extendsFrom implementation
    fernflowerCompile           .extendsFrom compile
    fernflowerImplementation    .extendsFrom implementation
    agentCompile                .extendsFrom compile
    agentImplementation         .extendsFrom implementation

}

// Include annotation processor sourceSet
sourceSets {
    legacy 
    main {
        compileClasspath += legacy.output
    }
    ap {
        compileClasspath += main.output
    }
    fernflower {
        compileClasspath += main.output
    }
    agent {
        compileClasspath += main.output
    }
    bridge {
        compileClasspath += main.output
    }

    launchwrapper {
        compileClasspath += main.output
    }
    modlauncher {
        compileClasspath += main.output
    }
}

// Project dependencies
dependencies {
    def guava = 'com.google.guava:guava:21.0' // from mc1.12 onwards
    def log4j2 = 'org.apache.logging.log4j:log4j-core:2.0-beta9'
    
    compile guava
    compile log4j2
    compile 'com.google.code.gson:gson:2.2.4'
    if (Float.parseFloat(asmVersion) < 6) {
        compile "org.ow2.asm:asm-debug-all:$asmVersion"
    }
    implementation "org.ow2.asm:asm-tree:$asmVersion"
    implementation "org.ow2.asm:asm-commons:$asmVersion"
    implementation "org.ow2.asm:asm-util:$asmVersion"

    // Annotation Processor
    apCompile "org.ow2.asm:asm-tree:$asmVersion"
    apCompile guava
    
    // Fernflower decompiler

    fernflowerCompile 'org.jetbrains.java.decompiler:fernflower:sponge-SNAPSHOT'

    // LegacyLauncher service

    launchwrapperCompile ('net.minecraft:launchwrapper:1.11') {
        exclude module: 'lwjgl'
        exclude module: 'asm-debug-all'
        exclude module: 'jopt-simple'
    }

    modlauncherImplementation 'net.sf.jopt-simple:jopt-simple:5.0.4'
    modlauncherCompileOnly 'org.apache.logging.log4j:log4j-core:2.0-beta9'
    modlauncherImplementation ("cpw.mods:modlauncher:$modlauncherVersion") {
        exclude module: 'asm'
        exclude module: 'asm-analysis'
        exclude module: 'asm-commons'
        exclude module: 'asm-tree'
        exclude module: 'jopt-simple'
    }
    

    // asm bridge
    bridgeCompile log4j2
    bridgeCompile "org.ow2.asm:asm-commons:$legacyForgeAsmVersion"
    
    legacyCompile "org.ow2.asm:asm-tree:$asmVersion"
}

javadoc {
    exclude '**/throwables'
    classpath += sourceSets.legacy.output
    source sourceSets.ap.allJava
    exclude {
        it.relativePath.file && it.relativePath.pathString =~ 'tools' && !(it.name =~ /SuppressedBy|package-info/) }
    options {
        docTitle 'Welcome to the Mixin Javadoc'
        overview 'docs/javadoc/overview.html'
        stylesheetFile file('docs/javadoc/mixin.css')
        addBooleanOption '-allow-script-in-comments', true
    }
    doLast {
        copy {
            from 'docs/javadoc/resources'
            into outputDirectory
        }
    }
}

// Eclipse
eclipse.classpath.plusConfigurations += [
    configurations.fernflowerCompile,
    configurations.launchwrapperCompile,
    configurations.modlauncherCompile,
    configurations.bridgeCompile
]

// IntelliJ
idea.module.scopes.COMPILE.plus += [
    configurations.fernflowerCompile,
    configurations.launchwrapperCompile,
    configurations.modlauncherCompile,
    configurations.bridgeCompile
]

// Filter, process, and include resources
processResources {
    // Include in final JAR
   from 'LICENSE.txt'
}

// License header formatting
license {
    ext {
        name = project.name
        organization = project.organization
        url = project.url
    }
    include '**/*.java'
    header file("HEADER.txt")
    sourceSets = project.sourceSets
    ignoreFailures false
    strictCheck true
    mapping {
        java = 'SLASHSTAR_STYLE'
    }
}

checkstyle {
    configProperties = [
        "name"        : project.name,
        "organization": project.organization,
        "url"         : project.url,
        "year"        : project.inceptionYear
    ]
    configFile = file("checkstyle.xml")
    toolVersion = '8.43'
}

// Source compiler configuration
tasks.withType(JavaCompile) {
    options.compilerArgs += ['-Xlint:all', '-Xlint:-path', '-proc:none']
    options.deprecation = true
    options.encoding = 'utf8'
}

if (JavaVersion.current().isJava8Compatible()) {
    tasks.withType(Javadoc) {
        // disable the crazy super-strict doclint tool in Java 8
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

task stagingJar(type: com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {
    sourceSets.each {
        if (it.name != 'example') {
            from it.output
        }
    }
    
    configurations = [project.configurations.stagingJar]
    
    // JAR manifest configuration
    manifest.attributes(
        "Built-By": System.properties['user.name'],
        "Created-By": System.properties['java.vm.version'] + " (" + System.properties['java.vm.vendor'] + ")",
        "Implementation-Title": name,
        "Implementation-Version": version + "+" + ciSystem + "-b" + buildNumber + ".git-" + commit,
        "Implementation-Vendor": url,
        // for hotswap agent
        "Premain-Class": "org.spongepowered.tools.agent.MixinAgent",
        "Agent-Class": "org.spongepowered.tools.agent.MixinAgent",
        "Can-Redefine-Classes": true,
        "Can-Retransform-Classes": true
    )

    mergeServiceFiles()
}

// Clear artifacts because jar will be there by default and we want to use staging jar instead
configurations.archives.artifacts.clear()

// generate shadow jar so we can use the AP standalone
shadowJar  {
    from sourceSets.ap.output
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
    classifier = 'processor'
}
build.dependsOn(shadowJar)

// Run this task instead of build to generate a timestamped shadow jar (for dev)
task timestamp(type: Jar, dependsOn: build) {
    if (gradle.startParameter.taskNames.contains(name)) {
        shadowJar.classifier = new Date().format('yyyyMMddHHmmss')
    }
}

task sourceJar(type: Jar) {
    sourceSets.each {
        from it.java
        from it.resources
    }
	classifier = "sources"
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	from javadoc.destinationDir
	classifier = "javadoc"
}

artifacts {
    archives stagingJar
    archives sourceJar
    archives shadowJar
}

ext.mavenPom = {
    name = project.archivesBaseName
    packaging = project.packaging
    description = project.projectName
    url = 'https://github.com/GTNewHorizons/SpongePoweredMixin/'
    
    scm {
        url = 'https://github.com/SpongePowered/Mixin'
        connection = 'scm:git@github.com:GTNewHorizons/SpongePoweredMixin.git'
        developerConnection = 'scm:git@github.com:GTNewHorizons/SpongePoweredMixin.git'
    }

    issueManagement {
        system = 'GitHub Issues'
        url = 'https://github.com/GTNewHorizons/SpongePoweredMixin/issues'
    }

    licenses {
        license {
            name = 'MIT license'
            url = 'http://opensource.org/licenses/MIT'
            distribution = 'repo'
        }
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            pom mavenPom
            groupId = project.group
            version = project.version
            artifactId = project.archivesBaseName

            artifact sourceJar
            artifact stagingJar
            artifact shadowJar
        }
    }
    repositories {
        maven {
            url = "http://jenkins.usrv.eu:8081/nexus/content/repositories/releases"
            credentials {
                username = System.getenv("MAVEN_USER") ?: "NONE"
                password = System.getenv("MAVEN_PASSWORD") ?: "NONE"
            }
        }
    }
}
